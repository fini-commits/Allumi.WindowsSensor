name: Build Windows Sensor (Squirrel)

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Find project file
        id: proj
        shell: pwsh
        run: |
          $proj = Get-ChildItem -Recurse -Filter *.csproj | Select-Object -First 1
          if (-not $proj) { Write-Error "No .csproj found"; exit 1 }
          Write-Host "Found project: $($proj.FullName)"
          echo "path=$($proj.FullName)" >> $env:GITHUB_OUTPUT

      - name: Restore
        run: dotnet restore "${{ steps.proj.outputs.path }}"

      - name: Publish single-file exe
        run: >
          dotnet publish "${{ steps.proj.outputs.path }}"
          -c Release -r win-x64
          -p:PublishSingleFile=true
          -p:IncludeNativeLibrariesForSelfExtract=true
          -o publish

      - name: Show publish output
        shell: pwsh
        run: |
          Write-Host "Publish directory contents:"
          Get-ChildItem -Recurse publish | Format-Table -AutoSize

      - name: Download Squirrel.Windows (legacy CLI for packaging)
        shell: pwsh
        run: |
          # Use the legacy Squirrel.Windows.CommandLine package which has the CLI tool
          $version = "2.0.1"
          $url = "https://www.nuget.org/api/v2/package/squirrel.windows/$version"
          Invoke-WebRequest -Uri $url -OutFile squirrel.zip
          Expand-Archive squirrel.zip -DestinationPath squirrel-tools
          Write-Host "Squirrel tools extracted"
          Get-ChildItem squirrel-tools -Recurse -Filter *.exe

      - name: Find published exe
        id: exe
        shell: pwsh
        run: |
          $exe = Get-ChildItem publish -Filter *.exe | Select-Object -First 1
          if (-not $exe) { Write-Error "No EXE found in publish/"; exit 1 }
          Write-Host "Found exe: $($exe.FullName)"
          echo "path=$($exe.FullName)" >> $env:GITHUB_OUTPUT

      - name: Create Squirrel Release Directory
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path releases -Force | Out-Null
          Write-Host "Created releases directory"

      - name: Package with Squirrel
        shell: pwsh
        run: |
          $squirrelExe = Get-ChildItem squirrel-tools -Recurse -Filter Squirrel.exe | Select-Object -First 1
          if (-not $squirrelExe) { Write-Error "Squirrel.exe not found"; exit 1 }
          Write-Host "Using Squirrel at: $($squirrelExe.FullName)"
          
          $exePath = "${{ steps.exe.outputs.path }}"
          Write-Host "Packaging: $exePath"
          
          # Create lib/net45 directory structure for NuGet package (Squirrel expects net45)
          New-Item -ItemType Directory -Path "package/lib/net45" -Force | Out-Null
          Copy-Item $exePath -Destination "package/lib/net45/"
          
          # Create a NuSpec file
          $nuspec = @"
          <?xml version="1.0" encoding="utf-8"?>
          <package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
            <metadata>
              <id>AllumiWindowsSensor</id>
              <version>1.0.${{ github.run_number }}</version>
              <title>Allumi Windows Sensor</title>
              <authors>Allumi</authors>
              <description>Windows activity tracking sensor for Allumi dashboard</description>
              <requireLicenseAcceptance>false</requireLicenseAcceptance>
            </metadata>
          </package>
          "@
          $nuspec | Out-File -FilePath "package/AllumiWindowsSensor.nuspec" -Encoding UTF8
          
          # Download NuGet
          $nugetUrl = "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe"
          Invoke-WebRequest -Uri $nugetUrl -OutFile "nuget.exe"
          
          # Pack using the package directory structure
          .\nuget.exe pack package/AllumiWindowsSensor.nuspec -OutputDirectory .
          
          $nupkg = Get-ChildItem -Filter "AllumiWindowsSensor.*.nupkg" | Select-Object -First 1
          if (-not $nupkg) { Write-Error "No nupkg created"; exit 1 }
          Write-Host "Created package: $($nupkg.Name)"
          
          # Now releasify the package
          Write-Host "Running Squirrel releasify..."
          & $squirrelExe.FullName --releasify $nupkg.FullName --releaseDir releases --no-msi
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Squirrel releasify failed with exit code: $LASTEXITCODE"
            exit 1
          }
          
          Write-Host "`nRelease created in releases folder:"
          Get-ChildItem releases | Format-Table -AutoSize
          
          $setupExe = Get-ChildItem releases -Filter "Setup.exe" -ErrorAction SilentlyContinue
          if ($setupExe) {
            Write-Host "`nSetup.exe found!"
            Write-Host "Size: $($setupExe.Length) bytes"
          } else {
            Write-Error "Setup.exe was not created!"
            exit 1
          }

      - name: Upload Squirrel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-sensor-squirrel
          path: releases/**
      
      - name: Upload Base Installer
        uses: actions/upload-artifact@v4
        with:
          name: base-installer
          path: releases/Setup.exe
      
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.${{ github.run_number }}
          name: Release v1.0.${{ github.run_number }}
          body: |
            Allumi Windows Sensor Release
            
            ## Downloads
            - **Setup.exe** - Base installer for Vetra to customize
            - **Full package** - Complete Squirrel update package
            
            ## Changes
            - Auto-commit: ${{ github.event.head_commit.message }}
          files: |
            releases/Setup.exe
            releases/RELEASES
            releases/*.nupkg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
