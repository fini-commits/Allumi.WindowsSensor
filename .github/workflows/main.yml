name: Build Windows Sensor (Squirrel)

on:
  workflow_dispatch: {}

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Find project file
        id: proj
        shell: pwsh
        run: |
          $proj = Get-ChildItem -Recurse -Filter *.csproj | Select-Object -First 1
          if (-not $proj) { Write-Error "No .csproj found"; exit 1 }
          Write-Host "Found project: $($proj.FullName)"
          echo "path=$($proj.FullName)" >> $env:GITHUB_OUTPUT

      - name: Restore
        run: dotnet restore "${{ steps.proj.outputs.path }}"

      - name: Publish single-file exe
        run: >
          dotnet publish "${{ steps.proj.outputs.path }}"
          -c Release -r win-x64
          -p:PublishSingleFile=true
          -p:IncludeNativeLibrariesForSelfExtract=true
          -o publish

      - name: Show publish output
        shell: pwsh
        run: |
          Write-Host "Publish directory contents:"
          Get-ChildItem -Recurse publish | Format-Table -AutoSize

      - name: Download Squirrel.Windows (legacy CLI for packaging)
        shell: pwsh
        run: |
          # Use the legacy Squirrel.Windows.CommandLine package which has the CLI tool
          $version = "2.0.1"
          $url = "https://www.nuget.org/api/v2/package/squirrel.windows/$version"
          Invoke-WebRequest -Uri $url -OutFile squirrel.zip
          Expand-Archive squirrel.zip -DestinationPath squirrel-tools
          Write-Host "Squirrel tools extracted"
          Get-ChildItem squirrel-tools -Recurse -Filter *.exe

      - name: Find published exe
        id: exe
        shell: pwsh
        run: |
          $exe = Get-ChildItem publish -Filter *.exe | Select-Object -First 1
          if (-not $exe) { Write-Error "No EXE found in publish/"; exit 1 }
          Write-Host "Found exe: $($exe.FullName)"
          echo "path=$($exe.FullName)" >> $env:GITHUB_OUTPUT

      - name: Package with Squirrel
        shell: pwsh
        run: |
          $squirrelExe = Get-ChildItem squirrel-tools -Recurse -Filter Squirrel.exe | Select-Object -First 1
          if (-not $squirrelExe) { Write-Error "Squirrel.exe not found"; exit 1 }
          Write-Host "Using Squirrel at: $($squirrelExe.FullName)"
          
          New-Item -ItemType Directory -Path dist -Force | Out-Null
          
          $exePath = "${{ steps.exe.outputs.path }}"
          Write-Host "Packaging: $exePath"
          
          & $squirrelExe.FullName --releasify $exePath --releaseDir dist --no-msi
          
          Write-Host "Package created in dist folder:"
          Get-ChildItem dist
          
          # Find and rename Setup.exe for Vetra to use as base installer
          $setupExe = Get-ChildItem dist -Filter "Setup.exe" | Select-Object -First 1
          if ($setupExe) {
            Copy-Item $setupExe.FullName -Destination "dist\AllumiSensorBase.exe"
            Write-Host "Created base installer: AllumiSensorBase.exe"
          }

      - name: Upload Squirrel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-sensor-squirrel
          path: dist/**
      
      - name: Upload Base Installer
        uses: actions/upload-artifact@v4
        with:
          name: base-installer
          path: dist/AllumiSensorBase.exe
