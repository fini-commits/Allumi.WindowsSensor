name: Build Windows Sensor (Squirrel)

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Find project file
        id: proj
        shell: pwsh
        run: |
          $proj = Get-ChildItem -Recurse -Filter *.csproj | Select-Object -First 1
          if (-not $proj) { Write-Error "No .csproj found"; exit 1 }
          Write-Host "Found project: $($proj.FullName)"
          echo "path=$($proj.FullName)" >> $env:GITHUB_OUTPUT

      - name: Restore
        run: dotnet restore "${{ steps.proj.outputs.path }}"

      - name: Publish single-file exe
        run: >
          dotnet publish "${{ steps.proj.outputs.path }}"
          -c Release -r win-x64
          -p:PublishSingleFile=true
          -p:IncludeNativeLibrariesForSelfExtract=true
          -o publish

      - name: Show publish output
        shell: pwsh
        run: |
          Write-Host "Publish directory contents:"
          Get-ChildItem -Recurse publish | Format-Table -AutoSize

      - name: Download Clowd.Squirrel
        shell: pwsh
        run: |
          # Download Clowd.Squirrel standalone release
          $version = "2.11.1"
          $url = "https://github.com/clowd/Clowd.Squirrel/releases/download/v$version/Clowd.Squirrel.$version.nupkg"
          Write-Host "Downloading Clowd.Squirrel v$version..."
          Invoke-WebRequest -Uri $url -OutFile clowd-squirrel.zip
          Expand-Archive clowd-squirrel.zip -DestinationPath clowd-tools
          Write-Host "Clowd.Squirrel extracted"
          
          # Find the squirrel.exe
          $squirrelExe = Get-ChildItem clowd-tools -Recurse -Filter "squirrel.exe" | Select-Object -First 1
          if ($squirrelExe) {
            Write-Host "Found Squirrel at: $($squirrelExe.FullName)"
            & $squirrelExe.FullName --version
          } else {
            Write-Host "Available executables:"
            Get-ChildItem clowd-tools -Recurse -Filter "*.exe" | Format-Table Name, DirectoryName
          }

      - name: Find published exe
        id: exe
        shell: pwsh
        run: |
          $exe = Get-ChildItem publish -Filter *.exe | Select-Object -First 1
          if (-not $exe) { Write-Error "No EXE found in publish/"; exit 1 }
          Write-Host "Found exe: $($exe.FullName)"
          echo "path=$($exe.FullName)" >> $env:GITHUB_OUTPUT

      - name: Create Squirrel Release Directory
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path releases -Force | Out-Null
          Write-Host "Created releases directory"

      - name: Package with Squirrel
        shell: pwsh
        run: |
          # Find Clowd.Squirrel executable
          $squirrelExe = Get-ChildItem clowd-tools -Recurse -Filter "squirrel.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $squirrelExe) {
            Write-Error "squirrel.exe not found in clowd-tools"
            exit 1
          }
          Write-Host "Using Squirrel at: $($squirrelExe.FullName)"
          
          $exePath = "${{ steps.exe.outputs.path }}"
          Write-Host "Packaging: $exePath"
          
          # Use Clowd.Squirrel pack command
          Write-Host "Running Clowd.Squirrel pack..."
          & $squirrelExe.FullName pack `
            --packId "AllumiWindowsSensor" `
            --packVersion "1.0.${{ github.run_number }}" `
            --packAuthors "Allumi" `
            --packTitle "Allumi Windows Sensor" `
            --mainExe "Allumi.WindowsSensor.exe" `
            --packDir "publish" `
            --releaseDir "releases"
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Squirrel pack failed with exit code: $LASTEXITCODE"
            exit 1
          }
          
          Write-Host "`nRelease created in releases folder:"
          Get-ChildItem releases | Format-Table -AutoSize
          
          $setupExe = Get-ChildItem releases -Filter "*.exe" -ErrorAction SilentlyContinue
          if ($setupExe) {
            Write-Host "`nSetup executable(s) found!"
            $setupExe | ForEach-Object { Write-Host "  $($_.Name) - Size: $($_.Length) bytes" }
          } else {
            Write-Error "No setup executable was created!"
            Write-Host "`nAll files in releases:"
            Get-ChildItem releases -Recurse
            exit 1
          }

      - name: Upload Squirrel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-sensor-squirrel
          path: releases/**
      
      - name: Upload Base Installer
        uses: actions/upload-artifact@v4
        with:
          name: base-installer
          path: releases/*.exe
      
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.${{ github.run_number }}
          name: Release v1.0.${{ github.run_number }}
          body: |
            Allumi Windows Sensor Release
            
            ## Downloads
            - **Setup.exe** - Base installer for Vetra to customize
            - **Full package** - Complete Squirrel update package
            
            ## Changes
            - Auto-commit: ${{ github.event.head_commit.message }}
          files: |
            releases/*.exe
            releases/RELEASES
            releases/*.nupkg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
